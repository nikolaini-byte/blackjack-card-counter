{"ast":null,"code":"/**\n * Counting Systems for Card Counting Trainer\n * \n * Each system defines the point values for cards in a blackjack deck\n * and includes metadata about the system.\n */\n\nexport const COUNTING_SYSTEMS = {\n  HILO: {\n    id: 'HILO',\n    name: 'Hi-Lo',\n    description: 'The most popular balanced counting system. Easy to learn and effective.',\n    cardValues: {\n      '2': 1,\n      '3': 1,\n      '4': 1,\n      '5': 1,\n      '6': 1,\n      '7': 0,\n      '8': 0,\n      '9': 0,\n      '10': -1,\n      'J': -1,\n      'Q': -1,\n      'K': -1,\n      'A': -1\n    },\n    balanced: true,\n    bettingCorrelation: 0.97,\n    playingEfficiency: 0.51\n  },\n  KO: {\n    id: 'KO',\n    name: 'Knock-Out (KO)',\n    description: 'An unbalanced system that doesn\\'t require true count conversion. Easier for beginners.',\n    cardValues: {\n      '2': 1,\n      '3': 1,\n      '4': 1,\n      '5': 1,\n      '6': 1,\n      '7': 1,\n      '8': 0,\n      '9': 0,\n      '10': -1,\n      'J': -1,\n      'Q': -1,\n      'K': -1,\n      'A': -1\n    },\n    balanced: false,\n    bettingCorrelation: 0.88,\n    playingEfficiency: 0.61,\n    keyAdvantage: -4 // Key count per deck where advantage shifts\n  },\n  OMEGA_II: {\n    id: 'OMEGA_II',\n    name: 'Omega II',\n    description: 'A more advanced balanced system with higher playing efficiency than Hi-Lo.',\n    cardValues: {\n      '2': 1,\n      '3': 1,\n      '4': 2,\n      '5': 2,\n      '6': 2,\n      '7': 1,\n      '8': 0,\n      '9': -1,\n      '10': -2,\n      'J': -2,\n      'Q': -2,\n      'K': -2,\n      'A': 0\n    },\n    balanced: true,\n    bettingCorrelation: 0.92,\n    playingEfficiency: 0.55\n  }\n};\n\n/**\n * Get bet recommendation based on true count and counting system\n */\nexport const getBetRecommendation = (trueCount, systemId) => {\n  const system = COUNTING_SYSTEMS[systemId];\n  if (systemId === 'KO') {\n    // KO uses running count directly for betting\n    if (trueCount >= 5) return {\n      text: 'Max Bet',\n      color: 'text-green-400'\n    };\n    if (trueCount >= 3) return {\n      text: 'High Bet',\n      color: 'text-blue-400'\n    };\n    if (trueCount >= 1) return {\n      text: 'Moderate Bet',\n      color: 'text-yellow-400'\n    };\n    return {\n      text: 'Minimum Bet',\n      color: 'text-gray-300'\n    };\n  }\n\n  // For balanced systems (Hi-Lo, Omega II)\n  if (trueCount >= 5) return {\n    text: 'Max Bet',\n    color: 'text-green-400'\n  };\n  if (trueCount >= 3) return {\n    text: 'High Bet',\n    color: 'text-blue-400'\n  };\n  if (trueCount >= 1) return {\n    text: 'Moderate Bet',\n    color: 'text-yellow-400'\n  };\n  if (trueCount >= 0) return {\n    text: 'Minimum Bet',\n    color: 'text-gray-300'\n  };\n  return {\n    text: 'Minimum or Leave',\n    color: 'text-red-400'\n  };\n};\n\n/**\n * Calculate true count based on running count and decks remaining\n * Handles both balanced and unbalanced systems\n */\nexport const calculateTrueCount = (runningCount, decksRemaining, systemId) => {\n  const system = COUNTING_SYSTEMS[systemId];\n\n  // For unbalanced systems like KO, we don't convert to true count\n  if (!system.balanced) {\n    return runningCount;\n  }\n\n  // For balanced systems, calculate true count\n  if (decksRemaining <= 0) return 0;\n  const trueCount = runningCount / decksRemaining;\n  return Math.round(trueCount * 10) / 10; // Round to 1 decimal\n};","map":{"version":3,"names":["COUNTING_SYSTEMS","HILO","id","name","description","cardValues","balanced","bettingCorrelation","playingEfficiency","KO","keyAdvantage","OMEGA_II","getBetRecommendation","trueCount","systemId","system","text","color","calculateTrueCount","runningCount","decksRemaining","Math","round"],"sources":["C:/Users/silve/Downloads/blackjack-card-counter-main/frontend/src/utils/countingSystems.js"],"sourcesContent":["/**\n * Counting Systems for Card Counting Trainer\n * \n * Each system defines the point values for cards in a blackjack deck\n * and includes metadata about the system.\n */\n\nexport const COUNTING_SYSTEMS = {\n  HILO: {\n    id: 'HILO',\n    name: 'Hi-Lo',\n    description: 'The most popular balanced counting system. Easy to learn and effective.',\n    cardValues: {\n      '2': 1, '3': 1, '4': 1, '5': 1, '6': 1,\n      '7': 0, '8': 0, '9': 0,\n      '10': -1, 'J': -1, 'Q': -1, 'K': -1, 'A': -1\n    },\n    balanced: true,\n    bettingCorrelation: 0.97,\n    playingEfficiency: 0.51\n  },\n  KO: {\n    id: 'KO',\n    name: 'Knock-Out (KO)',\n    description: 'An unbalanced system that doesn\\'t require true count conversion. Easier for beginners.',\n    cardValues: {\n      '2': 1, '3': 1, '4': 1, '5': 1, '6': 1,\n      '7': 1, '8': 0, '9': 0,\n      '10': -1, 'J': -1, 'Q': -1, 'K': -1, 'A': -1\n    },\n    balanced: false,\n    bettingCorrelation: 0.88,\n    playingEfficiency: 0.61,\n    keyAdvantage: -4  // Key count per deck where advantage shifts\n  },\n  OMEGA_II: {\n    id: 'OMEGA_II',\n    name: 'Omega II',\n    description: 'A more advanced balanced system with higher playing efficiency than Hi-Lo.',\n    cardValues: {\n      '2': 1, '3': 1, '4': 2, '5': 2, '6': 2,\n      '7': 1, '8': 0, '9': -1,\n      '10': -2, 'J': -2, 'Q': -2, 'K': -2, 'A': 0\n    },\n    balanced: true,\n    bettingCorrelation: 0.92,\n    playingEfficiency: 0.55\n  }\n};\n\n/**\n * Get bet recommendation based on true count and counting system\n */\nexport const getBetRecommendation = (trueCount, systemId) => {\n  const system = COUNTING_SYSTEMS[systemId];\n  \n  if (systemId === 'KO') {\n    // KO uses running count directly for betting\n    if (trueCount >= 5) return { text: 'Max Bet', color: 'text-green-400' };\n    if (trueCount >= 3) return { text: 'High Bet', color: 'text-blue-400' };\n    if (trueCount >= 1) return { text: 'Moderate Bet', color: 'text-yellow-400' };\n    return { text: 'Minimum Bet', color: 'text-gray-300' };\n  }\n  \n  // For balanced systems (Hi-Lo, Omega II)\n  if (trueCount >= 5) return { text: 'Max Bet', color: 'text-green-400' };\n  if (trueCount >= 3) return { text: 'High Bet', color: 'text-blue-400' };\n  if (trueCount >= 1) return { text: 'Moderate Bet', color: 'text-yellow-400' };\n  if (trueCount >= 0) return { text: 'Minimum Bet', color: 'text-gray-300' };\n  return { text: 'Minimum or Leave', color: 'text-red-400' };\n};\n\n/**\n * Calculate true count based on running count and decks remaining\n * Handles both balanced and unbalanced systems\n */\nexport const calculateTrueCount = (runningCount, decksRemaining, systemId) => {\n  const system = COUNTING_SYSTEMS[systemId];\n  \n  // For unbalanced systems like KO, we don't convert to true count\n  if (!system.balanced) {\n    return runningCount;\n  }\n  \n  // For balanced systems, calculate true count\n  if (decksRemaining <= 0) return 0;\n  const trueCount = runningCount / decksRemaining;\n  return Math.round(trueCount * 10) / 10; // Round to 1 decimal\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}